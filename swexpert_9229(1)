//다른 사람 풀이
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.StringTokenizer;
 
public class Solution {

    private static int TC, N, M, MAX;
    private static int[] goods;
    private static StringBuilder sb = new StringBuilder();
 
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 
        TC = Integer.parseInt(br.readLine());
        for (int t = 1; t <= TC; t++) {
            sb.append("#").append(t).append(" ");
            // type solution for tc here
            StringTokenizer tokens = new StringTokenizer(br.readLine());
            N = Integer.parseInt(tokens.nextToken());
            M = Integer.parseInt(tokens.nextToken());
            MAX = 0;
            tokens = new StringTokenizer(br.readLine());
 
            goods = new int[N];
            for (int i = 0; tokens.hasMoreTokens(); i++) {
                goods[i] = Integer.parseInt(tokens.nextToken());
            }
            dfs(0, 0, 0);
            MAX = MAX == 0 ? -1 : MAX;
            sb.append(MAX);
            ////////////////////////////
            sb.append("\n");
        }
        System.out.println(sb);
    }
 
    private static void dfs(int i, int cur, int total) {
        if (total > M) {
            return;
        }
        if (cur == 2) {
            MAX = Math.max(total, MAX);
            return;
        }
        if (i == N) {
            return;
        }
 
        // 썼을 때
        dfs(i + 1, cur + 1, total + goods[i]);
        // 안썼을 때
        dfs(i + 1, cur, total);
    }
}
